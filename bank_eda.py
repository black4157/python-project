# -*- coding: utf-8 -*-
"""bank_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11SP-KzcVakphDiYXqfTtmvRH_nrY8gnH
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

#cons_price_idx : 가정이 소비하기 위해 구입하는 재화와 용역의 평균 가격을 측정한 지수
#cons_conf_idx : 전체 경제상황과 개인적 재무 상황에 대해 소비자가 낙관적으로 느끼는 정도를 측정

bank = pd.read_csv('/content/drive/MyDrive/솔트룩스 2조/bank.csv')
bank.head()

bank.info()

y = bank.iloc[:, -1]
y

bank_int = bank.loc[:, ['age', 'duration', 'campaign_count', 'pdays', 'pcampaign_count']]
bank_object = bank.loc[:, ['job', 'married', 'edu', 'default', 'home_loan', 'personal_loan', 'contact', 'month', 'day', 'pcampaign_result', 'y']]
bank_float = bank.loc[:, ['emp_var_rate', 'cons_price_idx', 'euribor_3m', 'nr_employed']]

bank.describe(include='all')

bank.corr()

for i in range(len(bank.columns)):
    print(bank[bank.columns[i]].value_counts())

bank['age'].hist() #중장년층이 가장 많음

bank['duration'].hist() #통화시간이 거의 짧음

bank['campaign_count'].hist() #컨택한 횟수가 대부분 10 미만

bank['pdays'].hist() #999값이 많음

bank['pcampaign_count'].hist() #이전 컨택 횟수가 대부분 0

plt.figure(figsize=(20, 10))
sns.heatmap(bank.corr(), annot=True)
plt.show()

plt.scatter(bank['nr_employed'], bank['euribor_3m']) #상관계수가 높아도 서로 인과관계는 없어보임
plt.show()

plt.scatter(bank['emp_var_rate'], bank['cons_price_idx'])
plt.show()

plt.scatter(bank['nr_employed'], bank['emp_var_rate'])
plt.show()

"""##차트 그리는 함수"""

#int형 countplot
def countplot_int(data):
    plt.figure(figsize=(20, 10))

    plt.subplot(2, 3, 1)
    sns.countplot(x = data['age']//10, data=data)

    plt.subplot(2, 3, 2)
    sns.countplot(x = data['duration']//60, data=data)

    plt.subplot(2, 3, 3)
    sns.countplot(x = data['campaign_count'], data=data)

    plt.subplot(2, 3, 4)
    sns.countplot(x = data['pdays'], data=data)

    plt.subplot(2, 3, 5)
    sns.countplot(x = data['pcampaign_count'], data=data)

    plt.tight_layout()

countplot_int(bank_int)

for column in bank_object:
    plt.figure(figsize=(15, 6))
    print(column.title())
    ax = sns.countplot(x=bank[column], hue=bank["y"])
    plt.show()

#범주형 pieplot
def pie(data):
    count=0
    for i in data:
        fig = plt.figure(figsize=(13, 13))
        ax = fig.add_subplot()
        pie = ax.pie(x = data[i].value_counts(), autopct='%.1f%%')
        plt.title(data.columns[count],fontsize=30)
        plt.legend(pie[0],labels = data[i].unique(), loc='upper left')
        plt.show()
        count+=1
        print('\n')

pie(bank_object)

#int형 boxplot
def boxplot_int(data):
    cnt=0
    for i in data:
        sns.boxplot(y = data[i].unique(), data = data)
        plt.title(data.columns[cnt])
        cnt+=1
        plt.show()
        print('\n')

boxplot_int(bank_int)

#float형 boxplot
def boxplot_float(data):
    cnt=0
    for i in data:
        sns.boxplot(y = data[i].unique(), data = data)
        plt.title(data.columns[cnt])
        cnt+=1
        plt.show()
        print('\n')

boxplot_float(bank_float)

"""##결측치 분포 확인 그래프 그리는 함수"""

# unknown -> null값 변경하기
bank.replace('unknown', np.NaN, inplace=True)
bank.replace('999', np.NaN, inplace=True)


# 결측치 분포 확인하기
import missingno
missingno.matrix(bank, color=(0.7, 0.7, 1.0))
plt.show()

"""## 상관관계/히트맵 그래프"""

# 상관관계/히트맵 그래프
bank.corr()

fig, ax = plt.subplots(figsize = (20, 10))
matrix = np.triu(bank.corr())
sns.heatmap(bank.corr(), annot=True, fmt='.2f', vmin=-1, vmax=1, center= 0, cmap='coolwarm')

